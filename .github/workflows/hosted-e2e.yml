name: Hosted Testing
on: [push]
concurrency:
  group: ${{ github.head_ref }}-e2e
  cancel-in-progress: true
jobs:
#  coordinator:
#    name: Build Coordinator
#    environment: Deployment
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./coordinator/Dockerfile
#          tags: featureformcom/coordinator:test
#          push: true
#
#  dashboard:
#    name: Build Dashboard
#    environment: Deployment
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./dashboard/Dockerfile
#          tags: featureformcom/dashboard:test
#          push: true
#
#  metadata:
#    name: Build Metadata
#    environment: Deployment
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./metadata/Dockerfile
#          tags: featureformcom/metadata:test
#          push: true
#
#  dashboard-metadata:
#    name: Build Dashboard Metadata
#    environment: Deployment
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./metadata/dashboard/Dockerfile
#          tags: featureformcom/metadata-dashboard:test
#          push: true
#
#
#  serving:
#    name: Build Serving
#    environment: Deployment
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./newserving/Dockerfile
#          tags: featureformcom/serving:test
#          push: true
#
#  worker:
#    name: Build Worker
#    environment: Deployment
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and export
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          file: ./runner/Dockerfile
#          tags: featureformcom/worker:test
#          push: true
  deploy:
    #needs: [coordinator, dashboard, metadata, dashboard-metadata, serving, worker]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_FF }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY_FF }}
      AWS_DEFAULT_REGION: us-east-1
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2

      - name: Check clusters
        run: aws eks list-clusters

      - name: Install Kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          kubectl version --client --output=yaml    

      - name: Install Helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm

      - name: Install IAM Authenticator
        run: |
          curl -o aws-iam-authenticator https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          ls $GITHUB_WORKSPACE
          echo "$GITHUB_WORKSPACE"
          echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH
          aws help

      - name: Check auth
        run: aws-iam-authenticator help

      - name: Add kubeconfig
        run: aws eks update-kubeconfig --name cicd-cluster

      - name: Test Kubectl
        run: kubectl get pods

      - name: Create Cert Manager Namespace
        run: kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -


      - name: Helm Install Cert Manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install certmgr jetstack/cert-manager \
            --set installCRDs=true \
            --version v1.8.0 \
            --namespace cert-manager 

      - name: Helm Install Featureform
        run: helm install featureform ./charts/featureform --set global.publicCert=true #--set global.version=test

      - name: Create Record
        run: |
          aws route53 change-resource-record-sets \
            --hosted-zone-id 1234567890ABC \
              --change-batch '
              {
                "Comment": "Testing creating a record set"
                ,"Changes": [{
                  "Action"              : "CREATE"
                  ,"ResourceRecordSet"  : {
                    "Name"              : "test.featureform.com"
                    ,"Type"             : "CNAME"
                    ,"TTL"              : 120
                    ,"ResourceRecords"  : [{
                    "Value"         : "abcdefg"
                  }]
                }
              }]
            }
          '

      - name: Helm Uninstall Featureform
        if: always()
        continue-on-error: true
        run: helm uninstall featureform

      - name: Helm Uninstall Cert Manager
        if: always()
        continue-on-error: true
        run: helm uninstall certmgr --namespace cert-manager
